:PROPERTIES:
:FILETAGS: programming python freecodecamp
:ID: budgetcalc
:END:
#+Title: Python Budget Calculator Instructions

* Python Budget Calculator

** Instructions
Complete the Category class in budget.py. It should be able to instantiate objects based on different budget categories like food, clothing, and entertainment. When objects are created, they are passed in the name of the category. The class should have an instance variable called ledger that is a list. The class should also contain the following methods:

    A deposit method that accepts an amount and description. If no description is given, it should default to an empty string. The method should append an object to the ledger list in the form of {"amount": amount, "description": description}.
    A withdraw method that is similar to the deposit method, but the amount passed in should be stored in the ledger as a negative number. If there are not enough funds, nothing should be added to the ledger. This method should return True if the withdrawal took place, and False otherwise.
    A get_balance method that returns the current balance of the budget category based on the deposits and withdrawals that have occurred.
    A transfer method that accepts an amount and another budget category as arguments. The method should add a withdrawal with the amount and the description "Transfer to [Destination Budget Category]". The method should then add a deposit to the other budget category with the amount and the description "Transfer from [Source Budget Category]". If there are not enough funds, nothing should be added to either ledgers. This method should return True if the transfer took place, and False otherwise.
    A check_funds method that accepts an amount as an argument. It returns False if the amount is greater than the balance of the budget category and returns True otherwise. This method should be used by both the withdraw method and transfer method.

When the budget object is printed it should display:

    A title line of 30 characters where the name of the category is centered in a line of * characters.
    A list of the items in the ledger. Each line should show the description and amount. The first 23 characters of the description should be displayed, then the amount. The amount should be right aligned, contain two decimal places, and display a maximum of 7 characters.
    A line displaying the category total.

Here is an example of the output:

#+BEGIN_SRC
*************Food*************
initial deposit        1000.00
groceries               -10.15
restaurant and more foo -15.89
Transfer to Clothing    -50.00
Total: 923.96
#+END_SRC

Besides the Category class, create a function (outside of the class) called create_spend_chart that takes a list of categories as an argument. It should return a string that is a bar chart.

The chart should show the percentage spent in each category passed in to the function. The percentage spent should be calculated only with withdrawals and not with deposits. Down the left side of the chart should be labels 0 - 100. The "bars" in the bar chart should be made out of the "o" character. The height of each bar should be rounded down to the nearest 10. The horizontal line below the bars should go two spaces past the final bar. Each category name should be written vertically below the bar. There should be a title at the top that says "Percentage spent by category".

This function will be tested with up to four categories.

Look at the example output below very closely and make sure the spacing of the output matches the example exactly.

#+BEGIN_SRC
Percentage spent by category
100|          
 90|          
 80|          
 70|          
 60| o        
 50| o        
 40| o        
 30| o        
 20| o  o     
 10| o  o  o  
  0| o  o  o  
    ----------
     F  C  A  
     o  l  u  
     o  o  t  
     d  t  o  
        h     
        i     
        n     
        g
#+END_SRC

** Run code
#+BEGIN_SRC python
# This entrypoint file to be used in development. Start by reading README.md
import budget
from budget import create_spend_chart
from unittest import main

food = budget.Category("Food")
food.deposit(1000, "initial deposit")
food.withdraw(10.15, "groceries")
food.withdraw(15.89, "restaurant and more food for dessert")
print(food.get_balance())
clothing = budget.Category("Clothing")
food.transfer(50, clothing)
clothing.withdraw(25.55)
clothing.withdraw(100)
auto = budget.Category("Auto")
auto.deposit(1000, "initial deposit")
auto.withdraw(15)

print(food)
print(clothing)

print(create_spend_chart([food, clothing, auto]))
#+END_SRC


** Method
*** The Category Class
- Accept the definition of a category with a name.
  - Once a category is defined, items can be deposited into it to add budget or withdrawn to represent expenditure.
  - Multiple categories can be defined and held in the function that's calling it.
- A category can be printed.
  - When printed, the name of the category is centered in a line of asterisks. (30 characters total)
  - All of the deposits and withdrawals are shown with the first 23 characters of the description.
  - Amounts are right-aligned, two decimal places, and display up to seven characters
  - The final line displays the total for category.
- Has an instance variable called "ledger" that is a list and holds the info passed to it.
- Has the methods:
  - Deposit: accepts amount and description, defaults to empty string with no description. Appends an object to the ledger with the form {"amount": amount, "description": description}.
  - Withdraw: Similar to deposit but stores the number as a negative. If there are not enough funds, nothing is added to the ledger. Returns True if the withdrawal is valid, False otherwise.
  - get-balance: Returns the current balance of the category, based on the deposits and withdrawals that have ocurred.
  - transfer: Accepts an amount and another budget category. Adds a withdrawal with the amount and the description "Transfer to [Destination Budget Category]" and adds similar but "Transfer from" and positive number to the other category. If not enough funds, nothing happens. Returns True if transfer is valid, False otherwise.
  - check_funds: Accepts an amount. If the amount is greater than the balance of the budget category, returns False, True otherwise. Used by the withdraw method and the transfer method.

*** Spend chart
- Outside the class, create_spend_chart function that takes a list of categories and returns a string that is a bar chart.
- Chart shows percentage spent in each category passed.
- Percentage spent is calculated only with withdrawals.
- Left side labeled 0-100.
- Bars are "o" character.
- Bars rounded down to nearest 10.
- Horizontal divider goes two spaces past final bar.
- Each category name written vertically below divider.
- Title at top says "Percentage spent by category."
- Up to four categories.



#+BEGIN_SRC python :results output
class Category:





def create_spend_chart(categories):
#+END_SRC

#+RESULTS:
: test!



#+BEGIN_SRC shell :results output
date
#+END_SRC

#+RESULTS:
: Fri Apr 21 21:07:31 CEST 2023
